<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mengzelev&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mengzelev.github.io/"/>
  <updated>2018-09-07T09:55:18.719Z</updated>
  <id>https://mengzelev.github.io/</id>
  
  <author>
    <name>Mengzelev</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim初探</title>
    <link href="https://mengzelev.github.io/2018/09/06/vim/"/>
    <id>https://mengzelev.github.io/2018/09/06/vim/</id>
    <published>2018-09-06T15:06:23.000Z</published>
    <updated>2018-09-07T09:55:18.719Z</updated>
    
    <content type="html"><![CDATA[<p>网上类似的教程已经有很多了，只是在玩耍<code>vimtutor</code>过程中的一点笔记。</p><p>同时开markdownPad和vim输入的后果就是在精神分裂的边缘试探.jpg</p><p>然而关键还是多用，这些破整理并没有卵用。（不知道我能坚持用vim到什么时候</p><p>在学的过程中不断出现的提示：</p><center><br><img src="/2018/09/06/vim/learnbyusing.png"><br><img src="/2018/09/06/vim/lbu2.png"><br></center><h1 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h1><p>方向键：<code>j↓ k↓ h← l→</code> （两边左右，中间下上）</p><p><s>所以h这篇文l章里j突然出现一些hjkl也不奇怪了呢</s></p><p>光标向前移动n个单词:<code>1w,2w,3w...</code></p><p>光标向前移动至第n个单词的末尾：<code>1e,2e,3e...</code></p><p>移动至行首：<code>0</code></p><p>移动至文末：<code>G</code></p><p>移动至文章开始：<code>gg</code></p><p><code>Ctrl-G</code>配合<code>G</code>使用风味更佳（跳转到某一行）</p><p>选中：<code>v+光标移动</code></p><h1 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h1><p>Normal mode: <code>ESC</code></p><p>进入输入模式:<code>i</code>（要操作时记得按esc退出）</p><h1 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h1><p>不保存并退出：<code>:q!</code></p><p>保存并退出：<code>:wq</code></p><p>另存为：<code>:w [filename]</code></p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除字符：<code>x</code></p><p>删除单词：<code>dw</code>(光标需移动到单词的开头</p><p>删除至行末：<code>d$</code></p><p>删除至词末:<code>dw</code></p><p>用count进行删除：<code>d2w,d1e...</code></p><p>删除整行：<code>dd，2dd,...</code> </p><p><s>从此dd具有了全新的意思</s></p><p>用<code>dd</code>删除的行被放入了寄存器中，<code>p</code>可在上方恢复</p><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><p>撤销最后一步操作:<code>u</code></p><p>撤销整行所有的操作：<code>U</code></p><p>恢复撤销：<code>Ctrl+R</code></p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>改写单个字符（rewrite）：<code>r+(the right character)</code></p><p>改写多个字符：<code>R+(right characters)</code></p><p>改写至词尾：<code>ce</code>（记得esc退出输入模式）</p><p>改写至行尾：<code>c$</code></p><p>整词替换：</p><pre><code>:s/old/new         //替换第一个:s/old/new/g     //在光标所在单行内将&quot;old&quot;全部替换为&quot;new&quot;\#,#old/new/g     //在\#标记出的行数范围内进行替换:%s/old/new/g    //在全文范围内进行替换:%s/old/new/gc    //在全文范围内查找并询问是否需要替换</code></pre><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>插入某个文件的内容：<code>:r+[filename]</code></p><p>插入某个命令行函数的返回值:e.g.<code>:r !dir</code></p><p>在光标上方新建一行：<code>o</code></p><p>在光标下方新建一行：<code>O</code></p><p>从词末开始输入：<code>a</code></p><p>从行末开始输入：<code>A</code>（Append）</p><p>复制：<code>y(yank)</code> <code>yw</code>可以复制一整个单词</p><p>粘贴：<code>p(paste)</code></p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>查找内容：<code>/+（查找内容）</code></p><p>正向查找：<code>n</code></p><p>反向查找：<code>N</code></p><p>从文末开始查找：<code>?+(查找内容)</code></p><p>返回查找前的地方：<code>ctrl-o</code> <strong>是字母O不是数字0</strong></p><p>括号匹配：<code>%</code></p><p>忽略大小写：<code>:set ic</code>(ignore case)</p><p>关闭忽略大小写:<code>:set noic</code></p><p>查找内容高亮：<code>:set hls/hlsearch</code></p><p>关闭高亮：<code>:nohlsearch</code></p><p>部分查找：<code>:set is/incsearch</code> (incsearch)</p><h1 id="暂时无法分组指令"><a href="#暂时无法分组指令" class="headerlink" title="暂时无法分组指令"></a>暂时无法分组指令</h1><p>输入命令行指令:<code>:!+(命令行指令)</code></p><p>帮助：<code>F1</code> or <code>help</code></p><p>指令补全：<code>Ctrl-D</code>配合<code>Tab</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上类似的教程已经有很多了，只是在玩耍&lt;code&gt;vimtutor&lt;/code&gt;过程中的一点笔记。&lt;/p&gt;
&lt;p&gt;同时开markdownPad和vim输入的后果就是在精神分裂的边缘试探.jpg&lt;/p&gt;
&lt;p&gt;然而关键还是多用，这些破整理并没有卵用。（不知道我能坚持用vim到
      
    
    </summary>
    
      <category term="Notes" scheme="https://mengzelev.github.io/categories/Notes/"/>
    
    
      <category term="Notes" scheme="https://mengzelev.github.io/tags/Notes/"/>
    
      <category term="vim" scheme="https://mengzelev.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>算法导论学习笔记-动态规划</title>
    <link href="https://mengzelev.github.io/2018/08/31/clrs-15dp/"/>
    <id>https://mengzelev.github.io/2018/08/31/clrs-15dp/</id>
    <published>2018-08-31T08:37:42.000Z</published>
    <updated>2018-09-05T02:12:40.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>以下是大段算法导论原句搬运。</p><p>只有带<u>下划线</u>的句子才是自己总结的。</p><h2 id="最优化问题"><a href="#最优化问题" class="headerlink" title="最优化问题"></a>最优化问题</h2><blockquote><p>动态规划方法通常用来求解<strong>最优化问题</strong>。这类问题可以有很多可行解，每个解都有一个值，我们希望寻找具有最优值（最小值或最大值）的解。我们成这样的解为问题的<u>一个</u>最优解，而不是最优解。</p></blockquote><h2 id="算法设计步骤"><a href="#算法设计步骤" class="headerlink" title="算法设计步骤"></a>算法设计步骤</h2><ul><li>刻画一个最优解的结构特征</li><li>递归地定义最优解的值</li><li>计算最优解的值，通常采用自底向上的方法</li><li>利用计算出的信息构造一个最优解（有时不需要）</li></ul><p>动态规划求解最优化问题应该具备的两个要素：<strong>最优子结构</strong>和<strong>子问题重叠</strong>。</p><p><u>简单来说就是，能根据原问题得到一个递推式（最优子结构），但是在这个递推式的计算过程中会出现大量重复计算的时候（子问题重叠），可以使用动态规划。</u></p><h2 id="最优子结构性质"><a href="#最优子结构性质" class="headerlink" title="最优子结构性质"></a>最优子结构性质</h2><blockquote><p>问题的最优解由相关子问题的最优解组合而成，而这些子问题可以独立求解。</p></blockquote><p>在发觉最优子结构性质的过程中，实际上遵循了如下的通用模式：<br>1.证明问题最优解的第一个组成部分是做出一个选择；<br>2.对于一个给定问题，在其可能的第一步选择中，你假定已经知道哪种选择才会得到最优解。<br>3.给定可获得的最优解的选择后，你确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间；<br>4.利用“剪切-粘贴”技术证明：作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解（反证法）：<u>假设子问题存在更优解，将子结构从整体中删除替换为更优解，与最优假设矛盾。</u></p><p>保持子问题空间尽可能简单，只在必要时才扩展它。（e.g.矩阵链乘法问题必须允许子问题在“两端”都可变）</p><p>可以用<strong>子问题的总数</strong>和<strong>每个问题需要考察多少种选择</strong>这两个因素的乘积来粗略肥西动态规划算法的运行时间。</p><p>具有最优子结构的问题子问题之间是<strong>无关</strong>，同一个原问题的一个子问题的解不影响另一个子问题的解。e.g.无权最短路径vs无权最长路径</p><h2 id="子问题重叠"><a href="#子问题重叠" class="headerlink" title="子问题重叠"></a>子问题重叠</h2><p>如果递归方法反复求解相同的子问题，我们就称最优化问题具有重叠子问题性质。与之相对的，利用分治方法求解的问题通常在递归的每一步都生成全新的子问题。</p><p>重构最优解：用另一个数组来记录最优解</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>自顶向下的备忘算法</li><li>自底向上的动态规划算法<br>一般自底向上的动态规划算法会比较快（没有递归调用开销，表的维护开销也更小）</li></ul><p>如果子问题空间中的某些子问题完全不必求解，备忘方法就会体现出优势</p><h1 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>某公司出售一段长度为i英寸的钢条的价格为$p_i(i=1,2,…,$单位为美元）。给定一段长度为n英寸的钢条和一个价格表$p_i(i=1,2,…,n)$，求切割钢条方案，使得销售收益$r_n$最大。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>长度为n英寸的钢条共有$2^{n-1}$中不同的切割方案。</p><p>如果一个最优解将钢条切割为k段$(1\le k\le n$)，那么最优切割方案<br>$$ n=i_1+i_2+…+i_k$$</p><p>将钢条切割为长度分别为$i_1,i_2,…,i_k$的小段，得到最大收益<br>$$ r_n=p_{i_1}+p_{i_2}+…+p_{i_k}$$</p><p>对于$r_n\ge 1$，我们可以用更短的钢条的最优切割收益来描述：<br>$$r_n=max(p_n,r_1+r_{n-1},r_2+r_{n-2},…,r_{n-1}+r_1)$$</p><p>更简单的，我们将钢条从左边切割下长度为$i$的一段，只对右边剩下的长度为$n-i$的一段继续进行切割（递归求解），对左边的一段则不再进行切割。可以得到$$r_n=max\limits_{1\le i\le n}(p_i+r_{n-i})$$<br>这样原问题只包含一个相关子问题的解而不是两个。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度：$\Theta(n^2)$</p><h2 id="子问题图"><a href="#子问题图" class="headerlink" title="子问题图"></a>子问题图</h2><center><br><img src="/2018/08/31/clrs-15dp/subpro.png" height="500"><br></center><h1 id="矩阵链乘法"><a href="#矩阵链乘法" class="headerlink" title="矩阵链乘法"></a>矩阵链乘法</h1><p>懒得写了。</p><h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><center><br><img src="/2018/08/31/clrs-15dp/matrix1.png" height="80"><br></center><p>对子问题的分析发现必须是子问题必须是两头可动的（i.e.一维数组是不够的）</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p><del>为什么原书是分页的我还得手敲一遍不能忍</del></p><pre><code>MATRIX-CHAIN-ORDER(p)    //自底向上的动态规划实现    n=p.length-1    let m[1..n,1..n] and s[1..n-1,2..n] be new tables    for i=1 to n        m[i,i]=0    for l=2 to n        for i=1 to n-l+1            j=i+l-1            m[i,j]=\infty            for k=i to j-1                q=m[i,k]+m[k+1,j]+p[i-1]*p[k]*p[j]                if q&lt;m[i,j]                    m[i,j]=q                    s[i,j]=k    return m and s</code></pre><h1 id="最长公共子序列（LCS）"><a href="#最长公共子序列（LCS）" class="headerlink" title="最长公共子序列（LCS）"></a>最长公共子序列（LCS）</h1><h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>先略</p><h2 id="最优子结构-1"><a href="#最优子结构-1" class="headerlink" title="最优子结构"></a>最优子结构</h2><center><br><img src="/2018/08/31/clrs-15dp/lcs1.png" height="120"><br><img src="/2018/08/31/clrs-15dp/lcs2.png" height="100"><br></center><h2 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h2><center><br><img src="/2018/08/31/clrs-15dp/lcs-length.png" height="500"><br><img src="/2018/08/31/clrs-15dp/lcs-table.png" height="300"><br></center><h1 id="最优二叉搜索树"><a href="#最优二叉搜索树" class="headerlink" title="最优二叉搜索树"></a>最优二叉搜索树</h1><p>和矩阵链乘法类似</p><p>也懒得抄了</p><p><s>一份毫无营养的学习笔记就完成了</s></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h1&gt;&lt;p&gt;以下是大段算法导论原句搬运。&lt;/p&gt;
&lt;p&gt;只有带&lt;u&gt;下划线&lt;/u&gt;的句子才是自己总结的。&lt;/p&gt;
&lt;h2 id=&quot;最优化
      
    
    </summary>
    
      <category term="Notes" scheme="https://mengzelev.github.io/categories/Notes/"/>
    
    
      <category term="Notes" scheme="https://mengzelev.github.io/tags/Notes/"/>
    
      <category term="CLRS" scheme="https://mengzelev.github.io/tags/CLRS/"/>
    
      <category term="Problem Solving" scheme="https://mengzelev.github.io/tags/Problem-Solving/"/>
    
      <category term="dynamic programming" scheme="https://mengzelev.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言复习笔记（二）</title>
    <link href="https://mengzelev.github.io/2018/08/30/asm2/"/>
    <id>https://mengzelev.github.io/2018/08/30/asm2/</id>
    <published>2018-08-30T08:37:42.000Z</published>
    <updated>2018-08-30T08:42:36.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h1><h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><p><u>格式： mov S(源操作数), D(目标操作数)</u></p><p>mov  &nbsp;&nbsp; 一般传送指令</p><p>movs &nbsp;&nbsp; 符号扩展传送</p><p>movz &nbsp;&nbsp; 零扩展传送</p><p>push &nbsp;&nbsp; 压栈，等价于sub+mov</p><p>pop  &nbsp;&nbsp; 退栈，等价于mov+add</p><p>按源操作数的长度加上b,w,l后缀，分别表示1、2、4字节。(movz,movs需要双后缀)</p><center><br><img src="/2018/08/30/asm2/mov.png" height="400"><br></center><p>见<a href="#lealmov">leal与movl的区别</a></p><p><strong>指令后缀、操作数长度、目标寄存器宽度必须要一致！！</strong></p><h2 id="操作数类型"><a href="#操作数类型" class="headerlink" title="操作数类型"></a>操作数类型</h2><ul><li>立即数 Imm &nbsp;&nbsp; 整型常量，加<code>$</code>前缀，e.g.<code>$233, $0x66FFCC</code></li><li>寄存器 Reg &nbsp;&nbsp; 加%前缀，e.g.<code>%eax,%ebx,%esp</code></li><li>存储器 Mem &nbsp;&nbsp; 寻址操作</li></ul><center><br><img src="/2018/08/30/asm2/memaddr.png" height="400"><br></center><p><strong>不能在一条指令里实现存储器到存储器的传送！！</strong>要实现存储器间的传送必须经过寄存器。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><center><br><img src="/2018/08/30/asm2/regs.png" height="400"><br></center><p>所有寄存器都可以单独读取低16位</p><p>只有%eax,%ecx,%edx,%ebx可以读取低8位（x字辈）</p><h2 id="地址运算指令"><a href="#地址运算指令" class="headerlink" title="地址运算指令"></a>地址运算指令</h2><p><u>格式: leal S,D </u></p><p>S是<strong>复杂寻址地址形式的表达式</strong>，将表达式表示的值写入D，其中D一定是<strong>寄存器</strong></p><p>用途：</p><ul><li>直接计算地址的值 e.g.<code>p=&amp;x</code></li><li>执行简单的算数运算</li></ul><p><span id="lealmov"> leal与mov操作的区别： </span><br><strong>leal不会对寻址表达式解引用</strong></p><p>e.g.</p><pre><code>//R[%edx]=xmovl 7(%edx,%edx,4),%eax    //R[%eax]=M[5x+7]leal 7(%edx,%edx,4),%eax    //R[%eax]=5x+7</code></pre><h1 id="算术和逻辑操作"><a href="#算术和逻辑操作" class="headerlink" title="算术和逻辑操作"></a>算术和逻辑操作</h1><h2 id="看表"><a href="#看表" class="headerlink" title="看表"></a>看表</h2><center><br><img src="/2018/08/30/asm2/arith.png" height="500"><br></center><p><strong>※使用时也需要根据操作数长度添加后缀</strong></p><h2 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h2><p>imull &nbsp;&nbsp; 带符号乘法指令，只有一个操作数时，另一个乘数隐含在%eax中，乘积的高32位放入%edx,低32位存入%eax</p><p>idivl &nbsp;&nbsp; 带符号除法指令，只有一个操作数时，%edx-%eax为被除数，操作数为除数，商存入%eax,余数存入%edx</p><p>还有无符号版本mull和divl</p><p>cltd 符号扩展指令，将%eax中的数符号扩展至%edx成为64位,经常用于idivl的准备工作</p><center><br><img src="/2018/08/30/asm2/sparith.png" height="350"><br></center><h2 id="关于imul"><a href="#关于imul" class="headerlink" title="关于imul"></a>关于imul</h2><table><thead><tr><th style="text-align:center">操作数个数</th><th style="text-align:center">格式</th><th style="text-align:left">操作</th><th style="text-align:center">结果存放</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><code>imul src</code></td><td style="text-align:left">src*R[%eax]，完全乘法（自己取的名字）</td><td style="text-align:center">%edx-%eax</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>imul src dst</code></td><td style="text-align:left">src*dst,高位截断，只保留低位</td><td style="text-align:center">dst</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><code>imul reg src imm</code></td><td style="text-align:left">R[reg]=src*imm，只保留低位</td><td style="text-align:center">reg</td></tr></tbody></table><p>具体还是看老师ppt截图吧（侵权删）</p><center><br><img src="/2018/08/30/asm2/imull.png" height="400"><br></center><h1 id="条件控制指令"><a href="#条件控制指令" class="headerlink" title="条件控制指令"></a>条件控制指令</h1><h2 id="比较与测试"><a href="#比较与测试" class="headerlink" title="比较与测试"></a>比较与测试</h2><center><br><img src="/2018/08/30/asm2/cmp.png" height="350"><br></center><p>cmp和test指令实际上是用减法和按位与操作实现的。</p><p>注意两个操作数的先后顺序与实际是<strong>相反</strong>的</p><h2 id="条件置位指令setX"><a href="#条件置位指令setX" class="headerlink" title="条件置位指令setX"></a>条件置位指令setX</h2><p>setX指令根据相应的条件标志位将某一位置0或置1。</p><p>有符号数的大小关系用greater/less表示，无符号数的用above/below表示。</p><center><br><img src="/2018/08/30/asm2/set.png" height="400"><br></center><h2 id="条件跳转指令jmpX"><a href="#条件跳转指令jmpX" class="headerlink" title="条件跳转指令jmpX"></a>条件跳转指令jmpX</h2><p>基本同setX</p><center><br><img src="/2018/08/30/asm2/jmp.png" height="400"><br></center><p>间接跳转：跳转的目标是从寄存器或存储器中读取的，e.g.<code>jmp *%eax</code>表示跳转至R[%eax]存储的地址位置</p><p>跳转地址分为<strong>绝对地址</strong>和<a href="#pc-r"><strong>相对地址(PC-relative addressing)</strong></a>。</p><p>绝对地址即4个字节直接指定的目标地址。</p><h2 id="PC-relative-addressing"><a href="#PC-relative-addressing" class="headerlink" title="PC-relative addressing"></a><span id="pc-r">PC-relative addressing</span></h2><p>程序计数器的值是<strong>跳转指令后</strong>的那条指令的地址，而非跳转指令本身的地址</p><p>实际跳转到的地址=下一条指令的地址+右边的操作数<strong>（小端补码表示）</strong></p><p>e.g.</p><pre><code>804828f:    74 05                je         XXXXXXX8048291:    e8 1e 00 00 00         call    80482b4XXXXXXX=0x8048291+0x05=0x8048296</code></pre><h2 id="条件传送指令cmovX"><a href="#条件传送指令cmovX" class="headerlink" title="条件传送指令cmovX"></a>条件传送指令cmovX</h2><p>满足某个条件时执行mov操作</p><p><strong>※必须与cmp操作连用，比较的不是cmov指令的两个操作数而是cmp的两个操作数</strong></p><center><br><img src="/2018/08/30/asm2/cmov.png" height="400"><br></center><h2 id="条件分支语句的编译"><a href="#条件分支语句的编译" class="headerlink" title="条件分支语句的编译"></a>条件分支语句的编译</h2><p>if-else语句通常按goto方式执行</p><p>一般翻译思路为:</p><pre><code>if (test-expr)     then-statementelse    else-statement</code></pre><p>会被翻译为</p><pre><code>if(!test-expr)    goto falsethen-statementgoto donefalse:else-statementdone:</code></pre><p>可以参考下图中示例：</p><center><br><img src="/2018/08/30/asm2/ifelse.png" height="600"><br></center><h1 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h1><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><p>一般循环语句都最终翻译成do-while的形式</p><pre><code>do    body-statementwhile(test-expr)</code></pre><p>会被翻译为</p><pre><code>loop:    body-statement    if(test-expr) goto loop;</code></pre><center><br><img src="/2018/08/30/asm2/dowhile.png" height="500"><br></center><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre><code>while(test-expr)    body-statement</code></pre><p>会被翻译为</p><pre><code>if(!test-expr) goto done;loop:    body-statement    if(test-expr) goto loop;done:</code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre><code>for(init-expr; test-expr; update-expr)    body-statement</code></pre><p>会被翻译为</p><pre><code>init-expr;if(!test-expr) goto done;loop:    body-statement    update-expr    if(test-expr) goto loop;done:</code></pre><h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><p>跳跃表是一个数组，其中每个下标i对应一个代码段的地址<br><img src="/2018/08/30/asm2/jumplist.png" height="300"></p><p>好处：执行一个switch语句的时间和case的数量无关<br>跳跃表一般被存放在内存的某个位置，可以调用gdb查看</p><p>一大波截图预警</p><center><br><img src="/2018/08/30/asm2/switch1.png" height="1000"><br><img src="/2018/08/30/asm2/switch2.png" height="800"><br></center><h1 id="作业二的教训"><a href="#作业二的教训" class="headerlink" title="作业二的教训"></a>作业二的教训</h1><hr><p>1.几个指令的名称对应功能要背熟</p><p>2.确定数据类型：确定长度+<strong>有无符号</strong></p><p>3.别忘了<strong>指针</strong>也是一种数据类型</p><p>4.jmp指令的第二个操作数是<strong>小端补码表示</strong></p><p>5.模拟汇编控制流就是要把代码拆分成简单语句（注意运算优先级）</p><p>6.分清<strong>andl</strong>和<strong>addl</strong></p><p>7.补充C代码的时候就不要再写<strong>8x</strong>这样意义不明的东西了，是<strong><code>8*x</code></strong>啊老兄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据传送&quot;&gt;&lt;a href=&quot;#数据传送&quot; class=&quot;headerlink&quot; title=&quot;数据传送&quot;&gt;&lt;/a&gt;数据传送&lt;/h1&gt;&lt;h2 id=&quot;数据传送指令&quot;&gt;&lt;a href=&quot;#数据传送指令&quot; class=&quot;headerlink&quot; title=&quot;数据传送指
      
    
    </summary>
    
      <category term="Notes" scheme="https://mengzelev.github.io/categories/Notes/"/>
    
    
      <category term="Assembly Language" scheme="https://mengzelev.github.io/tags/Assembly-Language/"/>
    
      <category term="Notes" scheme="https://mengzelev.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言复习笔记（一）</title>
    <link href="https://mengzelev.github.io/2018/08/29/asm-notes/"/>
    <id>https://mengzelev.github.io/2018/08/29/asm-notes/</id>
    <published>2018-08-29T05:11:42.000Z</published>
    <updated>2018-08-30T03:32:00.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文为学校课程面向考试复习笔记，参考内容为老师的课堂讲义&amp;<em>深入理解计算机系统</em>，依据这两者做了一些个人的整理便于复习。<del>然而浪了一个假期在退课的边缘试探</del></p><h1 id="信息的表示"><a href="#信息的表示" class="headerlink" title="信息的表示"></a>信息的表示</h1><h2 id="数值的表示"><a href="#数值的表示" class="headerlink" title="数值的表示"></a>数值的表示</h2><ul><li>原码：这个很直观的</li><li>反码：这个几乎不用的</li><li>补码：$D’=R^n-D$ / 按位取反加1；</li><li>移码：见<a href="#float">浮点数</a></li></ul><p><strong>补码</strong></p><ul><li>相当于取模操作</li><li>着重区分<strong>基数的值(R)</strong>和<strong>补码位表示的实际的值(D)</strong></li><li>R与D的相对大小一致</li><li>$R=D+D_{w-1}\cdot 2^w$</li></ul><h2 id="C语言中的整数"><a href="#C语言中的整数" class="headerlink" title="C语言中的整数"></a>C语言中的整数</h2><ul><li>无符号数：在数后加U或u</li><li>同时有无符号数和带符号数，编译器将带符号数强制转换为<strong>无符号数</strong></li><li>int的最大正值为2147483647，最大负值为-2147483648</li><li><strong>比较时要特别注意是按什么规则进行的</strong></li></ul><h2 id="数据的存放"><a href="#数据的存放" class="headerlink" title="数据的存放"></a>数据的存放</h2><ul><li>小端：最低有效字节存放在<strong>最小</strong>地址</li><li>大端：最低有效字节存放在<strong>最大</strong>地址</li></ul><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a><span id="float">浮点数</span></h2><p>编码表示分3个字段</p><ul><li>符号s &nbsp; 0正1负 </li><li>阶码E &nbsp; k位阶码字段exp </li><li>尾数M &nbsp; n位小数字段frac &nbsp; 表示的是a/2^n</li></ul><p>float &nbsp; k=8,n=23</p><p>double &nbsp; k=11,n=52</p><p><strong>三种表示情况</strong></p><p><strong>1.规格化</strong> &nbsp;&nbsp;<br><strong>阶码部分既不全0也不全1</strong></p><p>采用偏置形式：<code>E=e-Bias</code></p><p>其中，E为阶码实际的值，e为位模式下的无符号数，偏置Bias= $2^{k-1}-1$ <code>float:127, double:1023</code></p><p>指数范围： <code>float: -126~+127; double -1022~1023</code></p><p>尾数 <code>M=f+1</code> &nbsp; 其中 <code>0&lt;=f&lt;1; 1&lt;=M&lt;2</code></p><p><strong>非规格化</strong> &nbsp;&nbsp;<br><strong>阶码全0</strong></p><p>阶码<code>E=1-Bias</code></p><p>尾数<code>M=f</code></p><p>存在意义：提供了0的表示方法，逐渐溢出 &nbsp; （否则[0,$2^{-n})范围内的数都无法表示）</p><p><strong>特殊值</strong> &nbsp;&nbsp;<br><strong>阶码全1</strong></p><ul><li>尾数全0：正负无穷大</li><li>尾数非全0： NaN</li></ul><p><strong>浮点数加减运算</strong><br>步骤：对阶→加减→规格化（→舍入）</p><p>对阶：小阶向大阶看齐，小阶尾数右移（带上隐含的1）</p><h1 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>没什么好说的。</p><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><ul><li>左移<code>x&lt;&lt;k</code>  丢弃最高k位，在右端补k个0</li><li>右移<code>x&gt;&gt;k</code>  丢弃最低k为，在右端补k个0/符号位</li></ul><p><strong>移位运算是向下取整</strong></p><h2 id="整数加减法"><a href="#整数加减法" class="headerlink" title="整数加减法"></a>整数加减法</h2><p>发生在n位带标志加法器中</p><p>###条件标志位<br>计算<code>t=a+b</code></p><table><thead><tr><th style="text-align:center">eflag</th><th style="text-align:center">中文名称</th><th style="text-align:center">有效条件</th></tr></thead><tbody><tr><td style="text-align:center">OF</td><td style="text-align:center">溢出标志</td><td style="text-align:center">a,b同号但t与a,b异号</td></tr><tr><td style="text-align:center">SF</td><td style="text-align:center">符号标志</td><td style="text-align:center">t&lt;0</td></tr><tr><td style="text-align:center">ZF</td><td style="text-align:center">零标志</td><td style="text-align:center">t==0</td></tr><tr><td style="text-align:center">CF</td><td style="text-align:center">进位标志</td><td style="text-align:center">(unsigned)t&lt;(unsigned)a</td></tr></tbody></table><p>比较大小相当于做减法</p><ul><li>无符号数： CF==0 $\Leftrightarrow$ a&gt;b</li><li>有符号数： OF==SF $\Leftrightarrow$ a&gt;b</li></ul><h2 id="整数乘法"><a href="#整数乘法" class="headerlink" title="整数乘法"></a>整数乘法</h2><p>乘数中有常数时：采用移位(左移)+加减法相结合的形式</p><h2 id="整数除法"><a href="#整数除法" class="headerlink" title="整数除法"></a>整数除法</h2><p>默认朝0方向舍入：，即正数商取比自身<strong>小</strong>的最接近整数，负数商取比自身<strong>大</strong>的最接近整数</p><p><strong>用移位代替除法时需要负数需要加上一个偏移量</strong></p><p>除数为2的幂次时，采用右移运算，得到朝0方向舍入的结果</p><ul><li>无符号数、有符号正整数： 移出的地位直接丢弃</li><li>有符号负整数： ：加偏移量 (2^k-1) ，然后再右移k位，低位截断</li></ul><h1 id="作业一的教训"><a href="#作业一的教训" class="headerlink" title="作业一的教训"></a>作业一的教训</h1><p>1.~按位取反 和 ！全部取反要区分清楚</p><p>2.非按位运算操作符非0的都视为true</p><p>3.浮点数的转化要好好看一下，把转化公式写好</p><p>4.移位是向下取整</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文为学校课程面向考试复习笔记，参考内容为老师的课堂讲义&amp;amp;&lt;em&gt;深入理解计算机系统&lt;/em&gt;，依据这两者做了一些个人的整理便于复习
      
    
    </summary>
    
      <category term="Notes" scheme="https://mengzelev.github.io/categories/Notes/"/>
    
    
      <category term="Assembly Language" scheme="https://mengzelev.github.io/tags/Assembly-Language/"/>
    
      <category term="Notes" scheme="https://mengzelev.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>胡言乱语的大一总结</title>
    <link href="https://mengzelev.github.io/2018/08/18/freshman/"/>
    <id>https://mengzelev.github.io/2018/08/18/freshman/</id>
    <published>2018-08-18T13:27:02.000Z</published>
    <updated>2018-08-18T15:46:17.255Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;生日兼七夕窝在家里无聊于是开了这样一篇文章写了整整两天，都是些碎碎念。本来并没有写这种东西的习惯的<em>(:з」∠)</em>但是既然开了个人blog总要写点什么的于是就写吧！<del>试图掩盖写不出教程的事实</del>将来过好几年来看可能会很有回忆的感觉。</p><h2 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h2><p>刚进大学的时候，军训期间闲得蛋疼去考了计拔居然还被录取了，<del>txp他老人家眼光真的没问题吗，</del>于是就开始了贼船之旅。大一上第一个国庆长假就只能窝在家里写作业写了好久堪称心理阴影，大一上被问求这门神奇的课给吓尿了，动不动就为了赶作业修仙到两点。<del>其实还是有在疯狂补小排球的</del> 到了大一下觉得大一上还是很空闲的，起码不用搭面包板，也不用抄大物作业。大二上可能会觉得大一下很轻松吧，笑着活下去.jpg</p><center><br><img src="/2018/08/18/freshman/up.png" height="500"><br><br>大一上课表<br><br><img src="/2018/08/18/freshman/down.png" height="400"><br><br>大一下课表<br></center><p>随便说说几门课给我的感受。</p><p><strong>微积分</strong>早有耳闻，学起来没有觉得很难，可能也是托了qlz的福，这样有主见有原则的老师我超级赞赏的，上课还会讲故事，<del>最重要的是他给分高啊！</del> 本来和害怕数学的我渐渐也能感受到数学的美了吧，大概。</p><p><strong>微电子</strong>，浪费生命的水课，课听了，作业做了，考试考了但是感觉毫无收获。 </p><p><strong>大物实验</strong>，水课，求求来个人告诉我实验报告怎样才能拿到优。</p><p> <strong>大物</strong>，不明觉厉，学学物理其实挺好玩的，但是ldx这本书为什么这么…【无fuck说.jpg】<del>果然xmw这种老师还是早点辞退比较好</del> xw是真的很卖力啊但是为什么我还是听不懂，对不起他。虽然物理课每节都有在听但是经常忍不住水群导致错过了好多，下学期请务必全神贯注，不然电磁学要GG了。 </p><p><strong>思修</strong>， <strong>军理</strong>， <strong>马原</strong>， 水课三连，马原老师讲的哲学还有那么点意思，可惜全在写oj了没认真听。<del>军理部分老师太sb了请立刻辞退</del></p><p><strong>数电</strong> 嘛，还挺有意思的，搭面包板有点抓狂但是比比大班就有心里安慰了。<del>还有wgs真的好帅啊！！！</del> </p><p><strong>英语</strong>， 我喜欢，大一上的视听说拍视频很开心，<del>虽然我只是个压榨组员的主催</del>。大一下的配音和演讲超有意思的，演讲做了啊你妹相关的虽然很花时间但还是超开心的。Ruth的读写课天下第一好，我吹爆她！第一学期的时候就猜对了一个谜语而已她居然觉得我很厉害还送了我一个史迪仔期末还给了我满分，真的只是非洲人突然偷渡入欧而已…总之超级感谢的…第二学期结课的时候Ruth还哭了…能跟学生交心的老师是真的难得啊qwq</p><p><strong>问求</strong>， 终于到了这门让我百感交集无fuck说的课。大一上:卧槽我在学什么；大一下：卧槽这题该怎么做。大一上作业不算难但是量炒鸡大，期末考试也莫名其妙。大一下，作业不多但是好多不会做的，其他课作业又比较多只能出卖灵魂与网络上的算法导论参考答案签订契约成为期末挂科烧酒（雾）。OJ…别提了…我只是题解的搬运工…期末mj查什么重啊…您出题出这么难不找题解还怎么做啊…把OJ当acm校队选拔吗…</p><p><strong>汇编</strong>，一定要告诫学弟学妹，千万别听whj讲课，看csapp自学效率最高。whj讲课听不懂催眠效果还极好。实验部分装装Linux调调gdb还是挺好玩的，作业也还行，做下来对CPU的工作方式算是有了个全新的认识。【然而汇编笔记的文章还是没有产出来】拆炸弹是真的很有意思，每拆完一个phase都超有成就感，我应该是走火入魔了，连着3个晚上没睡好觉，闭眼就是寄存器，然后被自己炸醒。拆了三天也是够慢的，自卑.jpg.马上开学要考试了完全不想复习，在退课的边缘试探，，，</p><p><strong>通识</strong>, 感觉这一年里还是太忙于专业课的学习了，通识课上下来并没有太大的收获，基本都是上课不听埋头写作业<del>或者沉迷水群</del>，期末论文之类的也是东拼西凑的学术垃圾。和进大学之前想的完全不一样唉…悦读经典emmmmm论理想与现实的差距，目前为止选的三本书没有哪一本是认真看过的，我什么时候能中《呐喊》、《彷徨》呢？即使中了，在专业课重压之下真的会好好看吗？</p><p>课外学习的话，平时在校根本挤不出时间，总是带着不到ddl不写作业的惰性思维，这一点希望能改啊，<del>可是既然有时间难道不应该优先看番吗</del>。暑假龟速自学了git和markdown，其实都不是很有技术含量的东西，接下来的时间看看能不能学…你数学建模相关还一点没看呢吧…吧…美赛还没报名呢吧…咕掉了校内培训和选拔的严重后果…总之，加油吧。</p><p>也一度因为周围的人都去打acm迷茫过要不要去打，但是高中三年noip下来其实也不是太愉快，貌似不太喜欢这种过于理论、过于数学的题目，可能也是一种逃避现实的借口吧。嘛，既然决定了不打acm就一定要认真科研啊。不过现在学得太少真的不敢妄下定论自己喜欢什么。<del>西瓜书，请。</del></p><p>还有既然决定要出国了，请认真背单词。</p><blockquote><p>这个人真的不是精神分裂吗</p></blockquote><h2 id="社团活动篇"><a href="#社团活动篇" class="headerlink" title="社团活动篇"></a>社团活动篇</h2><p>说到大学必须得有社团活动哒！上大学之前幻想了很多的，进了大学为生活所迫也就活跃了几个地方。</p><p><strong>吉协</strong>是早就想去的，结果实际上也就大一上去上了弹唱提高班。老师还挺好的吧，至少比家这里的好，还稍微入门了一下指弹。之后的活动完全没有参加了orz什么时候才能把曲子练到能上台表演的水平呢…</p><p><strong>辩队</strong>还是有好好待的！<del>虽然是被学姐忽悠进去的还只打了两场正式比赛全是输给冠军的一轮游。</del>在辩队一年还从来没赢过一场，太惨了。每次比赛前讨论真的好花时间。一开始写一辩稿还好，后来开始被钦定打三辩稿子都是开场前30min写的了简直丢人。受了信管那边的学长学姐好多照顾（包括wrc)，除了辩论技巧还被拖着玩了狼人杀，所以，传火吧，骚年！</p><p><strong>CAC音乐部</strong>每天水水群约约饭很开心der!还认识了一帮宅友！好多会玩乐器的、唱歌超好听的小哥哥小姐姐！<del>还有豹跳如雷的海豹们两个月四对的传说</del>！还有每次交作业被33处刑…去过大活楼梯间约歌（一次），线上歌会（两次），107（等末子姐姐拍照一次），完美错过所有线下约k。也算是遗憾比较大的一个地方，当初大一上觉得自己作业太多了没去Monge，乐队的锅也没接。现在Monge都凉了，大二上更不可能有空了。仔细想想大一上其实能好好安排时间的话完全是有空的，但是刚进大学谁能想到呢？还是太求稳了缺少逼自己一把的勇气吧。为才能不足而自卑.jpg。接了vocal团的锅希望表达一点愧疚之意吧。<del>你们的(副)团长是全团最不会唱歌的人。</del></p><p><strong>流跡</strong>是在你群水群聊骨头社意外被33拉进去的。之前完全没想过还有这么硬核的探讨宅话题的地方。一开始什么都看不懂（现在依然是），但是以此为契机了解了不少<del>其实也不多</del>啊你妹制作相关的知识。后来进来的玄枝爷爷讲了好多叙事学的东西，很厉害的样子但是完全没听懂自卑.jpg。自从能在流跡吹水新番之后感觉自己的追番越来越勤快了，经各位的安利看番面也越来越广了。和各位的约饭也非常愉快。英语pre做了动画制作流程相关的内容以及现在补《白箱》都和流跡脱不了干系，想快点变得pro能和各位聊起来啊qwq</p><p><strong>排队</strong>是恶补了小排球之后才加的，虽然没有小排球里那么刺激<del>也没有那么多可爱的男孩子</del>但是打排球真的好开心！在场边加油很晒应该没晒黑多少吧(bushi)学姐们都好厉害！一路打进了院系杯四强！技术不足还不足以成为战力下个学期要好好加油了！</p><p>除此之外开学乱加的几个早就为作业所迫咕掉了。比如校会学创啊，信管乒队什么的。（你真的会打乒乓吗）大二上也不敢对社团活动有所奢望了，好好在辩队带带小孩、vocal团的工作做做好，流跡快点把制作流程产出，我就满足了。<code>你看又开始求稳没有拼劲了</code></p><h2 id="生活篇"><a href="#生活篇" class="headerlink" title="生活篇"></a>生活篇</h2><p>大学生活的第一年吗…总体还算平稳的吧。</p><p>宿舍不是太愉快。烦心事也就不多提了，忘掉最好。</p><p>一年来基本都靠食堂过日子，叫外卖的次数屈指可数。大一上基本没出过几次校门，大一下逐渐开始放浪形骸。</p><p>寒假鼓起勇气买了人生第一套jk制服，月野家的奶油黄基础款冬服，到快入夏的时候才到的，也就穿了一次。之后入了优马家的绀金和红酒雪梨，燕子家的白五本，从此走上攒钱买衣服的不归路。优马大小姐的定金已经下了，最近出了那么多问题…等浅色的出货爱咋滴咋地吧。代码定金也下了，坐等出货，我也想穿着代码敲代码！</p><p>es军训的时候还在肝rock，开学后尝到了生活的艰辛，尤其是在做人情肝了一发节分守门两小时作业一笔未动修仙勉强做完后，从此es脱坑。现在极其想把手头的谷子都卖掉，忘记我这个出坑的人渣吧。fgo军训无聊稍微玩了一下，总之是不想过靠肝和欧生活的日子了，这月就不登了。</p><p>大一下开始学车，暑假的时候留校一个多礼拜把科三给考了，过得超惊险。大二上要在上课和作业的夹缝中学科二了。</p><h2 id="补番篇"><a href="#补番篇" class="headerlink" title="补番篇"></a>补番篇</h2><p>就不一一列举了这一年里补/追过的番了，类似于推荐的形式挑几部印象深刻的写吧。</p><p><strong>小排球</strong>  强推！吹爆！运动番天花板！剧情作画配乐都堪称一流！看到停不下来！一般深夜补番的我多次因为小排球亢奋到睡不着。好久没看这么从头正到尾的番了，既有很现实的设定（及川大王和影山）也有理想的处理（日向和乌野的大家）。不会气活牛顿的科学运动番，<del>唯一不现实的地方是现实中的小男孩哪有这么可爱。</del>看完甚至开始打排球的我不是一个人。心情不好的时候看看小排球就能马上开心起来。有生之年能遇到这样的番真是太好了。</p><p><strong>三月的狮子</strong> 对上电波的慢节奏番，吹爆羽海野老师和新房！！零酱超可爱！！（摸摸）很喜欢这种有关人生与成长的题材，零酱和三姐妹经历的困难特殊而普遍，仿佛能看到自己的过去。身世悲惨的他们也时常享有寻常的幸福，这种强烈对比大概就是三狮的动人之处。岛田大师兄、小胖、老师等配角刻画得也很好。虽然将棋部分的内容完全看不懂但也不妨碍其成为一部佳作。</p><p><strong>超自然九人组</strong> 志仓千代丸的作品，剧情，尤其是开头和中间展开很精彩，节奏飞快，收尾略显仓促，不少坑挖了没填，听说游戏表现得反而没有动画好有点可惜。<del>佐仓这回治好了我的巨乳控！</del></p><p><strong>宅男腐女恋爱难</strong> 太甜了！一部刷新我恋爱观的番！我萌捷列夫就是饿死，死外边，也不会看狗粮番的——真香！</p><p>其他看过的番bangumi上都有记录了就不作赘述了。顺便贴上<a href="http://bangumi.tv/user/426807/&quot;萌捷列夫的bangumi&quot;" target="_blank" rel="noopener">我的bangumi</a>。</p><h2 id="恋爱篇"><a href="#恋爱篇" class="headerlink" title="恋爱篇"></a>恋爱篇</h2><p>您是不是一上来就通过目录索引跳这儿来了？哈哈！对不起！毛都没有！</p><p>……</p><p>没有对象但还是想说说恋爱观的，毕竟之前也没有认真思考过这个问题，就大一上拒了俩然后被吓到了发表了一堆独身主义宣言<del>现在想想全tm是黑历史啊好想删说说。</del>其实也没有那么抗拒了啦<code>首先你得...</code>只是自己不是那种想随便玩玩的人，所以想尽可能抱着认真谨慎的心态来对待这么重要的事情<code>首先你得...</code>不过话说回来还是作业太多了，客观上不想再多加一件需要操心的事情了<code>首先你得...</code>没有空间里那些对象怪那么迫切，还是很享受单身的自由生活的，只要管好自己就行了，<del>想喜欢谁就喜欢谁做个dd不好吗？</del>也就是出去玩找不到小伙伴的时候会稍微有点寂寞（）。各有各的生活方式吧。总之，这么看缘分的事情还是随缘吧…</p><p>嗯？您问有没有喜欢的人了？这篇文章没加密我当然不会说啦！(doge)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;生日兼七夕窝在家里无聊于是开了这样一篇文章写了整整两天，都是些碎碎念。本来并没有写这种东西的习惯的&lt;em&gt;(:з」∠)&lt;/em&gt;但是既然开了个人blog总要写点什么的于是就写吧！&lt;del&gt;试图掩盖写不出教程的事实&lt;/del&gt;将来过好几年来看可能会很有
      
    
    </summary>
    
      <category term="Diary" scheme="https://mengzelev.github.io/categories/Diary/"/>
    
    
      <category term="freshman" scheme="https://mengzelev.github.io/tags/freshman/"/>
    
      <category term="college life" scheme="https://mengzelev.github.io/tags/college-life/"/>
    
  </entry>
  
  <entry>
    <title>Markdown test</title>
    <link href="https://mengzelev.github.io/2018/08/12/test-md/"/>
    <id>https://mengzelev.github.io/2018/08/12/test-md/</id>
    <published>2018-08-12T13:27:02.000Z</published>
    <updated>2018-08-12T13:35:34.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是标题君"><a href="#这是标题君" class="headerlink" title="这是标题君"></a>这是标题君</h1><h2 id="这是副标题君"><a href="#这是副标题君" class="headerlink" title="这是副标题君"></a>这是副标题君</h2><p>我知道这篇文章看起来很沙雕，因为作者就是一个沙雕</p><p>列表非常有趣</p><ul><li>这是第一项</li><li>这是第二项</li><li>这是第三项</li></ul><hr><p>有时候会有需要<strong>强调</strong>的内容。</p><p>插入代码是一件非常爽的事情：</p><pre><code>printf(&quot;%s&quot;,&quot;Hello world!\n&quot;);</code></pre><p>突然发现自己不会用printf真是太丢人了。</p><hr><p>有时候需要插入链接，这里贴一个<a href="http://www.baidu.com/" target="_blank" rel="noopener">百度</a>。</p><p>有时候又需要插入图片</p><center><br>    <img src="https://pic2.zhimg.com/80/v2-bf04338ea0065cea5dc853e7d1675c25_hd.jpg" height="330"><br></center><p>看张血小板冷静一下吧（图源网络）</p><p>图片的尺寸可以用命令进行修改</p><hr><p>暂时先写这么多吧，敬请关注后面几期，计划中将会有</p><ul><li>汇编课程相关学习笔记</li><li>日本动画制作流程及《白箱》观后感整理</li><li>大一回顾与总结</li></ul><blockquote><p>但愿到时候不要鸽（小声）<br>评论功能等我明天再来开<br>不要问我这里为什么是引用格式，看不出来我只是在试试吗</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这是标题君&quot;&gt;&lt;a href=&quot;#这是标题君&quot; class=&quot;headerlink&quot; title=&quot;这是标题君&quot;&gt;&lt;/a&gt;这是标题君&lt;/h1&gt;&lt;h2 id=&quot;这是副标题君&quot;&gt;&lt;a href=&quot;#这是副标题君&quot; class=&quot;headerlink&quot; title=&quot;这
      
    
    </summary>
    
      <category term="Diary" scheme="https://mengzelev.github.io/categories/Diary/"/>
    
    
      <category term="markdown" scheme="https://mengzelev.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mengzelev.github.io/2018/07/28/hello-world/"/>
    <id>https://mengzelev.github.io/2018/07/28/hello-world/</id>
    <published>2018-07-28T06:23:10.175Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
